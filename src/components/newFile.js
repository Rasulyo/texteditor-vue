import { useEditor, Editor } from '@tiptap/vue-3';
import StarterKit from '@tiptap/starter-kit';
import Document from '@tiptap/extension-document';
import Heading from '@tiptap/extension-heading';
import Dropcursor from '@tiptap/extension-dropcursor';
import Image from '@tiptap/extension-image';
import Paragraph from '@tiptap/extension-paragraph';
import Text from '@tiptap/extension-text';

export default (await import('vue')).defineComponent({
  components: {
    Toolbar,
    EditorContent,
  },

  data() {
    return {
      content: '<p>–ó–¥–µ—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç...</p>',
    };
  },

  setup() {
    const editor = useEditor({
      content: '<p>–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ Vue.js —Å Tiptap üéâ</p>',
      extensions: [StarterKit],
    });

    return { editor };
  },

  methods: {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    handleKeyDown(event) {
      if (event.ctrlKey && event.key === 'z') {
        this.handleUndo();
      } else if (event.ctrlKey && event.key === 'y') {
        this.handleRedo();
      }
    },

    handleUndo() {
      this.editor.commands.undo();
    },

    handleRedo() {
      this.editor.commands.redo();
    },

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    handleToggleHeading() {
      // this.editor.chain().focus('start').newlineInCode().toggleHeading({ level: 1 }).run()
    },

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞
    handleToggleParagraph() {
      // const { tr, doc, selection } = this.editor.state
      // const { $from } = selection
      // const fromLine = doc.nodeAt($from.before())
      // const previousText = fromLine.textContent
      // const newText = previousText ? `${previousText}.` : ''
      const selection = this.editor.view.state.selection;

      // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ
      if (!selection.empty) {
        // –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        const { from, to } = selection;

        // –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        const paragraphNode =
          this.editor.view.state.schema.nodes.paragraph.create(
            {},
            this.editor.view.state.doc.slice(from, to).content
          );

        // –°–æ–∑–¥–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
        const lineBreak = this.editor.view.state.schema.text('\n');

        // –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
        const transaction = this.editor.view.state.tr.replaceRangeWith(
          from,
          to,
          [lineBreak, paragraphNode]
        );

        // –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
        this.editor.view.dispatch(transaction);
      } else {
        console.log('–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ.');
      }
    },

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    handleUploadImage() {
      const imageUrl = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
      if (imageUrl) {
        const imageNode = this.editor
          .chain()
          .focus()
          .setImage({ src: imageUrl })
          .run();
        this.editor.commands.setContent(imageNode);
      }
    },

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    handleCopyToClipboard() {
      const range = document.createRange();
      range.selectNodeContents(this.$refs.content);
      const selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      document.execCommand('copy');
      selection.removeAllRanges();
      // –î–æ–±–∞–≤–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
      alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    },
  },

  watch: {
    content(value) {
      if (this.editor && this.editor.getHTML() !== value) {
        this.editor.commands.setContent(value);
      }
    },
  },

  mounted() {
    this.editor = new Editor({
      extensions: [
        StarterKit,
        Document,
        Paragraph,
        Text,
        Image,
        Heading.configure({
          levels: [1, 2, 3],
        }),
        Dropcursor,
      ],
      content: this.content,
      onUpdate: () => {
        this.content = this.editor.getHTML();
      },
    });
  },

  beforeUnmount() {
    this.editor.destroy();
  },
});
